# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T03:15:02+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Path, Query

from models import (
    ApiMinistriesGetResponse,
    ApiNewslettersGetResponse,
    ApiPostsGetResponse,
    ApiPostsKeysIndexKindIndexKeyGetResponse,
    ApiPostsLatestIndexKindIndexKeyGetResponse,
    ApiResourceLinksGetResponse,
    ApiSectorsGetResponse,
    ApiServicesGetResponse,
    ApiSlidesGetResponse,
    ApiTagsGetResponse,
    ApiThemesGetResponse,
    Article,
    Edition,
    EditionImage,
    FacebookPost,
    Home,
    KeyValuePair2,
    Minister,
    Ministry,
    Newsletter,
    Post,
    PostKeys,
    Sector,
    Service,
    Slide,
    Tag,
    Theme,
)

app = MCPProxy(
    description='News API',
    license={
        'name': 'Apache 2.0',
        'url': 'https://www.apache.org/licenses/LICENSE-2.0',
    },
    title='BC Gov News API Service 1.0',
    version='1.0',
    servers=[{'url': 'https://news.api.gov.bc.ca/'}],
)


@app.get('/api/FacebookPosts/ByUri', tags=['post_handling'])
def facebook_posts__get_by_uri(
    uri: Optional[str] = '', api_version: str = Query(..., alias='api-version')
):
    """
    Get a Facebook post based on a Uri
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Home', tags=['homepage_resources'])
def home__get(api_version: str = Query(..., alias='api-version')):
    """
    Returns the top level content for the home page
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Ministries', tags=['ministry_info'])
def ministries__get_all(api_version: str = Query(..., alias='api-version')):
    """
    Get all ministries
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Ministries/{key}', tags=['ministry_info'])
def ministries__get_one(key: str, api_version: str = Query(..., alias='api-version')):
    """
    Get the Ministry associated with the ministry key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Ministries/{key}/Minister', tags=['ministry_info'])
def ministries__get_minister(
    key: str, api_version: str = Query(..., alias='api-version')
):
    """
    Get the Minister associated with the ministry key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Newsletters', tags=['newsletter_operations'])
def newsletters__get_all(api_version: str = Query(..., alias='api-version')):
    """
    Get all newsletters
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Newsletters/Images/{guid}', tags=['newsletter_operations'])
def newsletters__get_image(
    guid: str, api_version: str = Query(..., alias='api-version')
):
    """
    Get the image object reference by of a Newsletter Edition associated with the image guid
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Newsletters/{newsletterKey}', tags=['newsletter_operations'])
def newsletters__get_one(
    newsletter_key: str = Path(..., alias='newsletterKey'),
    api_version: str = Query(..., alias='api-version'),
):
    """
    Get a specific newsletter
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/Newsletters/{newsletterKey}/Editions/{editionKey}',
    tags=['newsletter_operations'],
)
def newsletters__get_edition(
    newsletter_key: str = Path(..., alias='newsletterKey'),
    edition_key: str = Path(..., alias='editionKey'),
    api_version: str = Query(..., alias='api-version'),
):
    """
    Returns a specific edition of a newsletter
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/Newsletters/{newsletterKey}/Editions/{editionKey}/Articles/{articleKey}',
    tags=['newsletter_operations'],
)
def newsletters__get_article(
    newsletter_key: str = Path(..., alias='newsletterKey'),
    edition_key: str = Path(..., alias='editionKey'),
    article_key: str = Path(..., alias='articleKey'),
    api_version: str = Query(..., alias='api-version'),
):
    """
    Get an article belonging to a Newsletter edition
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Posts', tags=['post_handling'])
def posts__get(
    post_keys: Optional[PostKeys] = Query('', alias='postKeys'),
    api_version: str = Query(..., alias='api-version'),
):
    """
    Get the posts associated with the keys in the list passed in.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Posts/Keys/{indexKind}/{indexKey}', tags=['post_handling'])
def posts__get_all_keys(
    index_kind: str = Path(..., alias='indexKind'),
    index_key: str = Path(..., alias='indexKey'),
    post_kind: Optional[str] = Query('', alias='postKind'),
    count: Optional[int] = '',
    skip: Optional[int] = '',
    api_version: str = Query(..., alias='api-version'),
):
    """
    Get all keys for the specified index (newsroom or category)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Posts/Keys/{reference}', tags=['post_handling'])
def posts__get_key_from_reference(
    reference: str, api_version: str = Query(..., alias='api-version')
):
    """
    Get the post key associated with the reference.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Posts/Latest/{indexKind}/{indexKey}', tags=['post_handling'])
def posts__get_latest(
    index_kind: str = Path(..., alias='indexKind'),
    index_key: str = Path(..., alias='indexKey'),
    post_kind: Optional[str] = Query('', alias='postKind'),
    count: Optional[int] = '',
    skip: Optional[int] = '',
    api_version: str = Query(..., alias='api-version'),
):
    """
    Get the latest posts of postKind for the specified index (default or category)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Posts/LatestMediaUri/{mediaType}', tags=['post_handling'])
def posts__get_latest_media_uri(
    media_type: str = Path(..., alias='mediaType'),
    api_version: str = Query(..., alias='api-version'),
):
    """
    Gets the latest Social Media post for the social media type passed in.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Posts/{key}', tags=['post_handling'])
def posts__get_one(key: str, api_version: str = Query(..., alias='api-version')):
    """
    Get the post associated with the key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/ResourceLinks', tags=['resource_link_management'])
def resource_links__get_all(api_version: str = Query(..., alias='api-version')):
    """
    Get all resource links
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Sectors', tags=['sector_info'])
def sectors__get_all(api_version: str = Query(..., alias='api-version')):
    """
    Get all Sectors
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Sectors/{key}', tags=['sector_info'])
def sectors__get_one(key: str, api_version: str = Query(..., alias='api-version')):
    """
    Get the sector associated with the key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Services', tags=['service_operations'])
def services__get_all(api_version: str = Query(..., alias='api-version')):
    """
    Get all Services
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Services/{key}', tags=['service_operations'])
def services__get_one(key: str, api_version: str = Query(..., alias='api-version')):
    """
    Get the service associated with the passed key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Slides', tags=['slide_info'])
def slides__get_all(api_version: str = Query(..., alias='api-version')):
    """
    Get all Slides
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Slides/{id}', tags=['slide_info'])
def slides__get_one(id: str, api_version: str = Query(..., alias='api-version')):
    """
    Get the slide associated to the id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Tags', tags=['tag_operations'])
def tags__get_all(api_version: str = Query(..., alias='api-version')):
    """
    Get all Tags
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Tags/{key}', tags=['tag_operations'])
def tags__get_one(key: str, api_version: str = Query(..., alias='api-version')):
    """
    Get the Tag associated with the key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Themes', tags=['theme_info'])
def themes__get_all(api_version: str = Query(..., alias='api-version')):
    """
    Get all Themes
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Themes/{key}', tags=['theme_info'])
def themes__get_one(key: str, api_version: str = Query(..., alias='api-version')):
    """
    Get the Theme associated with the key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
